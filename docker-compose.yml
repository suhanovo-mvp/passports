version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: tech-passport-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-tech_passport}
      MYSQL_USER: ${DB_USER:-tech_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-tech_password}
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - tech-passport-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-rootpassword}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: tech-passport-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - tech-passport-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Application (Backend + Frontend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tech-passport-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: mysql://${DB_USER:-tech_user}:${DB_PASSWORD:-tech_password}@db:3306/${DB_NAME:-tech_passport}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      REDIS_URL: redis://redis:6379
      PORT: 3000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tech-passport-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      start_period: 40s
      retries: 3

volumes:
  db_data:
    driver: local

networks:
  tech-passport-network:
    driver: bridge

